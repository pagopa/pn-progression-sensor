AWSTemplateFormatVersion: 2010-09-09
Description: "Example microservice deploy"

Transform:
  - UpdateDeploymentTransform

Parameters:
  ProjectName:
    Type: String
    Description:
      "Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment"

  LambdasBucketName:
    Type: String
    Description: "The S3 bucket from which to fetch the templates used by this stack."

  BucketBasePath:
    Type: String
    Description: "The S3 bucket base path where lambda functions are stored"

  # Unused but required by CD pipeline
  MicroserviceNumber:
    Type: Number
    Description: "Disambiguation useful for load balancer rules"

  # Unused but required by CD pipeline
  TemplateBucketBaseUrl:
    Type: String
    Description: "The S3 bucket from which to fetch the templates used by this stack."

  #SNS Topic Alarm Arn and Name
  AlarmSNSTopicArn:
    Type: String
    Description: "An ARN of an SNS topic where to send alarm when log line includes ERROR or FATAL"

  Version:
    Type: String
    Description: "Keep versioning of commitIds used for cloudformation templates"

  LogsKinesisSourceStreamArn:
    Type: String
    Description: "Kinesis stream that receive logs"

  # - Log exports parameters
  CloudwatchFilterPattern:
    Default: ""
    Type: String
    Description: filter expression for exported logs

  ProgressionSensorDataDynamoTableArn:
    Type: String
    Description: ARN of dynamodb table containing notifications metadata

  ProgressionSensorDataDynamoTableName:
    Type: String
    Description: Name of dynamodb table containing notifications metadata

  CdcKinesisSourceStreamArn:
    Type: String
    Description: "Where to send CDC"

  CdcKinesisSourceStreamKeyArn:
    Description: "Kinesis source CDC stream crypto key ARN"
    Type: String

  CdcProgressionSensorKinesisSourceStreamArn:
    Type: String
    Description: "Where to send CDC"

  CdcProgressionSensorKinesisSourceStreamKeyArn:
    Description: "Kinesis source CDC stream crypto key ARN"
    Type: String

  # SQS
  ProgressionSensorQueueARN:
    Description: "SQS queue ARN"
    Type: String

  ProgressionSensorQueueURL:
    Description: "SQS queue URL"
    Type: String

  # schedule cron expression:
  SlaViolationCheckRateExpression:
    Default: "rate(5 minutes)"
    Description: "Rate expression for scheduling the Close Schedululing Lambda"
    Type: String

  # schedule cron expression:
  SlaViolationCloseSchedulingLambdaTimeoutSeconds:
    Default: 60
    Description: "Timeout (in seconds) for Close Schedululing Lambda"
    Type: Number

Conditions:
  SendLogToKinesis: !Not [!Equals [!Ref LogsKinesisSourceStreamArn, ""]]

Resources:
  #########################################################
  ###              SearchSLAViolationsLambda            ###
  #########################################################

  # Lambda function
  SearchSLAViolationsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-searchSLAViolationsLambda"
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/searchSLAViolations.zip"
      Role: !GetAtt SearchSLAViolationsLambdaRole.Arn
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          DYNAMODB_TABLE: !Sub "${ProgressionSensorDataDynamoTableName}"
      Timeout: 10

  # Lambda function role
  SearchSLAViolationsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-SearchSLAViolationsLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

  # Lambda function IAM policy
  SearchSLAViolationsLambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-SearchSLAViolationsLambdaRolePolicy
      Roles:
        - !Ref SearchSLAViolationsLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:Query"
            Resource:
              - !Sub "${ProgressionSensorDataDynamoTableArn}"
              - !Sub "${ProgressionSensorDataDynamoTableArn}/*"

  # lambda function Log Group
  SearchSLAViolationsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SearchSLAViolationsLambda}"
      RetentionInDays: 14

  SearchSLAViolationsSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SubscriptionFilterServiceRole.Arn
      LogGroupName: !Ref SearchSLAViolationsLambdaLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  SearchSLAViolationsLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SearchSLAViolationsLambdaLogGroup
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref SearchSLAViolationsLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  #########################################################
  ###              ActivityStepManagerLambda            ###
  #########################################################

  # Lambda function
  ActivityStepManagerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-activityStepManagerLambda"
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/activityStepManager.zip"
      Role: !GetAtt ActivityStepManagerLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          DYNAMODB_TABLE: !Ref ProgressionSensorDataDynamoTableName
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Timeout: 10

  # Lambda function role
  ActivityStepManagerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-activityStepManagerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function IAM policy
  ActivityStepManagerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-ActivityStepManagerLambdaPolicy
      Roles:
        - !Ref ActivityStepManagerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:*"
            Resource:
              - !Ref ProgressionSensorDataDynamoTableArn
              - !Sub "${ProgressionSensorDataDynamoTableArn}/*"
          - Effect: Allow
            Action:
              - "dynamodb:GetItem"
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/pn-Notifications
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/pn-Notifications/*"
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:DescribeStreamSummary
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
              - kinesis:ListStreams
              - kinesis:SubscribeToShard
            Resource: !Ref CdcKinesisSourceStreamArn
          - Action: kms:Decrypt
            Effect: Allow
            Resource: !Ref CdcKinesisSourceStreamKeyArn

  # lambda function Log Group
  ActivityStepManagerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ActivityStepManagerLambda}"
      RetentionInDays: 14

  ### IAM Role used by Subscription filters to allow read logs from Cloudwatch and send logs to Kinesis Firehose
  SubscriptionFilterServiceRole:
    Condition: SendLogToKinesis
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: !Sub "${ProjectName}-progression-sensor-logs-subscription-role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - kinesis:PutRecord
                Effect: Allow
                Resource: "*"
              - Action:
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:Decrypt"
                Effect: Allow
                Resource: "*"

  ActivityStepManagerSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SubscriptionFilterServiceRole.Arn
      LogGroupName: !Ref ActivityStepManagerLambdaLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  # CDC to Activity Step Manager
  ActivityStepManagerLambdaKinesisSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 20
      BisectBatchOnFunctionError: true
      EventSourceArn: !Ref CdcKinesisSourceStreamArn
      FunctionName: !Ref ActivityStepManagerLambda
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: 300 # 1 minute
      StartingPosition: LATEST

  ActivityStepManagerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - ActivityStepManagerLambdaLogGroup
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref ActivityStepManagerLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  #########################################################
  ###              SLAViolationCheckerLambda            ###
  #########################################################

  # Lambda function (from Kinesis)
  SLAViolationCheckerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-slaViolationCheckerLambda"
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/slaViolationChecker.zip"
      Role: !GetAtt SLAViolationCheckerLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          DYNAMODB_TABLE: !Ref ProgressionSensorDataDynamoTableName
          INVOCATION_TYPE: "Kinesis"
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Timeout: 10

  # Lambda function (from SQS)
  SLAViolationCheckerLambdaSQS:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-slaViolationCheckerLambdaSQS"
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/slaViolationChecker.zip"
      Role: !GetAtt SLAViolationCheckerLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          DYNAMODB_TABLE: !Ref ProgressionSensorDataDynamoTableName
          INVOCATION_TYPE: "SQS"
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"

  # Lambda function role
  SLAViolationCheckerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-slaViolationCheckerLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function IAM policy
  SLAViolationCheckerLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-SLAViolationCheckerLambdaPolicy
      Roles:
        - !Ref SLAViolationCheckerLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource:
              - !Ref ProgressionSensorDataDynamoTableArn
              - !Sub "${ProgressionSensorDataDynamoTableArn}/*"
          - Effect: Allow
            Action:
              - "dynamodb:GetItem"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/pn-Timelines"
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:DescribeStreamSummary
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:ListShards
              - kinesis:ListStreams
              - kinesis:SubscribeToShard
            Resource: !Ref CdcProgressionSensorKinesisSourceStreamArn
          - Action: kms:Decrypt
            Effect: Allow
            Resource: !Ref CdcProgressionSensorKinesisSourceStreamKeyArn
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !Ref ProgressionSensorQueueARN

  SLAViolationCheckerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      FunctionResponseTypes:
        - ReportBatchItemFailures
      EventSourceArn: !Ref ProgressionSensorQueueARN
      FunctionName: !GetAtt SLAViolationCheckerLambdaSQS.Arn

  # lambda function Log Group
  SLAViolationCheckerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SLAViolationCheckerLambda}"
      RetentionInDays: 14

  SLAViolationCheckerSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SubscriptionFilterServiceRole.Arn
      LogGroupName: !Ref SLAViolationCheckerLambdaLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  # CDC to SLA Violation Checker
  SLAViolationCheckerLambdaKinesisSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 20
      BisectBatchOnFunctionError: true
      EventSourceArn: !Ref CdcProgressionSensorKinesisSourceStreamArn
      FunctionName: !Ref SLAViolationCheckerLambda
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: 300 # 1 minute
      StartingPosition: LATEST

  SLAViolationCheckerLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SLAViolationCheckerLambdaLogGroup
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref SLAViolationCheckerLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
  
  #########################################################
  ###          SLAViolationCloseSchedulingLambda        ###
  #########################################################

  # Lambda function
  SLAViolationCloseSchedulingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-slaViolationCloseSchedulingLambda"
      Runtime: nodejs18.x
      Handler: "index.handler"
      Code:
        S3Bucket: !Ref LambdasBucketName
        S3Key: !Sub "${BucketBasePath}/slaViolationCloseScheduling.zip"
      Role: !GetAtt SLAViolationCloseSchedulingLambdaRole.Arn
      Environment:
        Variables:
          REGION: !Sub ${AWS::Region}
          #SEARCH_SLA_VIOLATIONS_FUNCTION_NAME: !Ref SearchSLAViolationsLambda
          SEARCH_SLA_VIOLATIONS_FUNCTION_ARN: !GetAtt  SearchSLAViolationsLambda.Arn
          SEARCH_SLA_VIOLATIONS_QUEUE_URL: !Ref ProgressionSensorQueueURL
      TracingConfig:
        Mode: Active
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
      Timeout: !Ref SlaViolationCloseSchedulingLambdaTimeoutSeconds # it should be longer than other functions, since this one calls the search lambda synchronously

  # Lambda function role
  SLAViolationCloseSchedulingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-slaViolationCloseSchedulingLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda function IAM policy
  SLAViolationCloseSchedulingLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectName}-SLAViolationCloseSchedulingLambdaPolicy
      Roles:
        - !Ref SLAViolationCloseSchedulingLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !Ref ProgressionSensorQueueARN
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt SearchSLAViolationsLambda.Arn
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: "*"

  # lambda function Log Group
  SLAViolationCloseSchedulingLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SLAViolationCloseSchedulingLambda}"
      RetentionInDays: 14

  SLAViolationCloseSchedulingSubscriptionFilter:
    Condition: SendLogToKinesis
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt SubscriptionFilterServiceRole.Arn
      LogGroupName: !Ref SLAViolationCloseSchedulingLambdaLogGroup
      FilterPattern: !Ref CloudwatchFilterPattern
      DestinationArn: !Ref LogsKinesisSourceStreamArn

  LambdaScheduleRule:
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub "${ProjectName}-LambdaScheduleRule"
      ScheduleExpression: !Ref SlaViolationCheckRateExpression
      State: ENABLED
      Targets: 
        - Arn: !GetAtt SLAViolationCloseSchedulingLambda.Arn
          Id: !Ref SLAViolationCloseSchedulingLambda
          
  LambdaSchedulePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref SLAViolationCloseSchedulingLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaScheduleRule.Arn

  SLAViolationCloseSchedulingLambdaAlarms:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SLAViolationCloseSchedulingLambdaLogGroup
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/lambda-alarms.yaml"
      Parameters:
        FunctionName: !Ref SLAViolationCloseSchedulingLambda
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  # Dashboard
  MicroserviceDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub "${ProjectName}-progression-sensor"
        LambdaArns: !Join 
          - ','
          - - !GetAtt SearchSLAViolationsLambda.Arn
            - !GetAtt ActivityStepManagerLambda.Arn          
            - !GetAtt SLAViolationCheckerLambda.Arn          
            - !GetAtt SLAViolationCloseSchedulingLambda.Arn                      
        AlarmArns: !Join
          - ','
          - - !GetAtt SearchSLAViolationsLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt ActivityStepManagerLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt SLAViolationCheckerLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
            - !GetAtt SLAViolationCloseSchedulingLambdaAlarms.Outputs.LambdaInvocationErrorLogsMetricAlarm
  